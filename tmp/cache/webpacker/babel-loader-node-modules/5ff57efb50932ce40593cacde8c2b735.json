{"ast":null,"code":"/*! Responsive 2.0.0\n * 2014-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.0.0\n * @file        dataTables.responsive.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2014-2015 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /**\n   * Responsive is a plug-in for the DataTables library that makes use of\n   * DataTables' ability to change the visibility of columns, changing the\n   * visibility of columns so the displayed columns fit into the table container.\n   * The end result is that complex tables will be dynamically adjusted to fit\n   * into the viewport, be it on a desktop, tablet or mobile browser.\n   *\n   * Responsive for DataTables has two modes of operation, which can used\n   * individually or combined:\n   *\n   * * Class name based control - columns assigned class names that match the\n   *   breakpoint logic can be shown / hidden as required for each breakpoint.\n   * * Automatic control - columns are automatically hidden when there is no\n   *   room left to display them. Columns removed from the right.\n   *\n   * In additional to column visibility control, Responsive also has built into\n   * options to use DataTables' child row display to show / hide the information\n   * from the table that has been hidden. There are also two modes of operation\n   * for this child row display:\n   *\n   * * Inline - when the control element that the user can use to show / hide\n   *   child rows is displayed inside the first column of the table.\n   * * Column - where a whole column is dedicated to be the show / hide control.\n   *\n   * Initialisation of Responsive is performed by:\n   *\n   * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n   *   Responsive will automatically be initialised with the default configuration\n   *   options when the DataTable is created.\n   * * Using the `responsive` option in the DataTables configuration options. This\n   *   can also be used to specify the configuration options, or simply set to\n   *   `true` to use the defaults.\n   *\n   *  @class\n   *  @param {object} settings DataTables settings object for the host table\n   *  @param {object} [opts] Configuration options\n   *  @requires jQuery 1.7+\n   *  @requires DataTables 1.10.3+\n   *\n   *  @example\n   *      $('#example').DataTable( {\n   *        responsive: true\n   *      } );\n   *    } );\n   */\n\n  var Responsive = function Responsive(settings, opts) {\n    // Sanity check that we are using DataTables 1.10 or newer\n    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.3')) {\n      throw 'DataTables Responsive requires DataTables 1.10.3 or newer';\n    }\n\n    this.s = {\n      dt: new DataTable.Api(settings),\n      columns: [],\n      current: []\n    }; // Check if responsive has already been initialised on this table\n\n    if (this.s.dt.settings()[0].responsive) {\n      return;\n    } // details is an object, but for simplicity the user can give it as a string\n\n\n    if (opts && typeof opts.details === 'string') {\n      opts.details = {\n        type: opts.details\n      };\n    }\n\n    this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);\n    settings.responsive = this;\n\n    this._constructor();\n  };\n\n  $.extend(Responsive.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the Responsive instance\n     *\n     * @private\n     */\n    _constructor: function _constructor() {\n      var that = this;\n      var dt = this.s.dt;\n      var dtPrivateSettings = dt.settings()[0];\n      dt.settings()[0]._responsive = this; // Use DataTables' throttle function to avoid processor thrashing on\n      // resize\n\n      $(window).on('resize.dtr orientationchange.dtr', DataTable.util.throttle(function () {\n        that._resize();\n      })); // DataTables doesn't currently trigger an event when a row is added, so\n      // we need to hook into its private API to enforce the hidden rows when\n      // new data is added\n\n      dtPrivateSettings.oApi._fnCallbackReg(dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {\n        if ($.inArray(false, that.s.current) !== -1) {\n          $('td, th', tr).each(function (i) {\n            var idx = dt.column.index('toData', i);\n\n            if (that.s.current[idx] === false) {\n              $(this).css('display', 'none');\n            }\n          });\n        }\n      }); // Destroy event handler\n\n\n      dt.on('destroy.dtr', function () {\n        dt.off('.dtr');\n        $(dt.table().body()).off('.dtr');\n        $(window).off('resize.dtr orientationchange.dtr'); // Restore the columns that we've hidden\n\n        $.each(that.s.current, function (i, val) {\n          if (val === false) {\n            that._setColumnVis(i, true);\n          }\n        });\n      }); // Reorder the breakpoints array here in case they have been added out\n      // of order\n\n      this.c.breakpoints.sort(function (a, b) {\n        return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;\n      });\n\n      this._classLogic();\n\n      this._resizeAuto(); // Details handler\n\n\n      var details = this.c.details;\n\n      if (details.type !== false) {\n        that._detailsInit(); // DataTables will trigger this event on every column it shows and\n        // hides individually\n\n\n        dt.on('column-visibility.dtr', function (e, ctx, col, vis) {\n          that._classLogic();\n\n          that._resizeAuto();\n\n          that._resize();\n        }); // Redraw the details box on each draw which will happen if the data\n        // has changed. This is used until DataTables implements a native\n        // `updated` event for rows\n\n        dt.on('draw.dtr', function () {\n          that._redrawChildren();\n        });\n        $(dt.table().node()).addClass('dtr-' + details.type);\n      }\n\n      dt.on('column-reorder.dtr', function (e, settings, details) {\n        // This requires ColReorder 1.2.1 or newer\n        if (details.drop) {\n          that._classLogic();\n\n          that._resizeAuto();\n\n          that._resize();\n        }\n      }); // First pass - draw the table for the current viewport size\n\n      this._resize();\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Calculate the visibility for the columns in a table for a given\n     * breakpoint. The result is pre-determined based on the class logic if\n     * class names are used to control all columns, but the width of the table\n     * is also used if there are columns which are to be automatically shown\n     * and hidden.\n     *\n     * @param  {string} breakpoint Breakpoint name to use for the calculation\n     * @return {array} Array of boolean values initiating the visibility of each\n     *   column.\n     *  @private\n     */\n    _columnsVisiblity: function _columnsVisiblity(breakpoint) {\n      var dt = this.s.dt;\n      var columns = this.s.columns;\n      var i, ien; // Create an array that defines the column ordering based first on the\n      // column's priority, and secondly the column index. This allows the\n      // columns to be removed from the right if the priority matches\n\n      var order = columns.map(function (col, idx) {\n        return {\n          columnIdx: idx,\n          priority: col.priority\n        };\n      }).sort(function (a, b) {\n        if (a.priority !== b.priority) {\n          return a.priority - b.priority;\n        }\n\n        return a.columnIdx - b.columnIdx;\n      }); // Class logic - determine which columns are in this breakpoint based\n      // on the classes. If no class control (i.e. `auto`) then `-` is used\n      // to indicate this to the rest of the function\n\n      var display = $.map(columns, function (col) {\n        return col.auto && col.minWidth === null ? false : col.auto === true ? '-' : $.inArray(breakpoint, col.includeIn) !== -1;\n      }); // Auto column control - first pass: how much width is taken by the\n      // ones that must be included from the non-auto columns\n\n      var requiredWidth = 0;\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (display[i] === true) {\n          requiredWidth += columns[i].minWidth;\n        }\n      } // Second pass, use up any remaining width for other columns. For\n      // scrolling tables we need to subtract the width of the scrollbar. It\n      // may not be requires which makes this sub-optimal, but it would\n      // require another full redraw to make complete use of those extra few\n      // pixels\n\n\n      var scrolling = dt.settings()[0].oScroll;\n      var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n      var widthAvailable = dt.table().container().offsetWidth - bar;\n      var usedWidth = widthAvailable - requiredWidth; // Control column needs to always be included. This makes it sub-\n      // optimal in terms of using the available with, but to stop layout\n      // thrashing or overflow. Also we need to account for the control column\n      // width first so we know how much width is available for the other\n      // columns, since the control column might not be the first one shown\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (columns[i].control) {\n          usedWidth -= columns[i].minWidth;\n        }\n      } // Allow columns to be shown (counting by priority and then right to\n      // left) until we run out of room\n\n\n      var empty = false;\n\n      for (i = 0, ien = order.length; i < ien; i++) {\n        var colIdx = order[i].columnIdx;\n\n        if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {\n          // Once we've found a column that won't fit we don't let any\n          // others display either, or columns might disappear in the\n          // middle of the table\n          if (empty || usedWidth - columns[colIdx].minWidth < 0) {\n            empty = true;\n            display[colIdx] = false;\n          } else {\n            display[colIdx] = true;\n          }\n\n          usedWidth -= columns[colIdx].minWidth;\n        }\n      } // Determine if the 'control' column should be shown (if there is one).\n      // This is the case when there is a hidden column (that is not the\n      // control column). The two loops look inefficient here, but they are\n      // trivial and will fly through. We need to know the outcome from the\n      // first , before the action in the second can be taken\n\n\n      var showControl = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (!columns[i].control && !columns[i].never && !display[i]) {\n          showControl = true;\n          break;\n        }\n      }\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columns[i].control) {\n          display[i] = showControl;\n        }\n      } // Finally we need to make sure that there is at least one column that\n      // is visible\n\n\n      if ($.inArray(true, display) === -1) {\n        display[0] = true;\n      }\n\n      return display;\n    },\n\n    /**\n     * Create the internal `columns` array with information about the columns\n     * for the table. This includes determining which breakpoints the column\n     * will appear in, based upon class names in the column, which makes up the\n     * vast majority of this method.\n     *\n     * @private\n     */\n    _classLogic: function _classLogic() {\n      var that = this;\n      var calc = {};\n      var breakpoints = this.c.breakpoints;\n      var dt = this.s.dt;\n      var columns = dt.columns().eq(0).map(function (i) {\n        var column = this.column(i);\n        var className = column.header().className;\n        var priority = dt.settings()[0].aoColumns[i].responsivePriority;\n\n        if (priority === undefined) {\n          priority = $(column.header).data('priority') !== undefined ? $(column.header).data('priority') * 1 : 10000;\n        }\n\n        return {\n          className: className,\n          includeIn: [],\n          auto: false,\n          control: false,\n          never: className.match(/\\bnever\\b/) ? true : false,\n          priority: priority\n        };\n      }); // Simply add a breakpoint to `includeIn` array, ensuring that there are\n      // no duplicates\n\n      var add = function add(colIdx, name) {\n        var includeIn = columns[colIdx].includeIn;\n\n        if ($.inArray(name, includeIn) === -1) {\n          includeIn.push(name);\n        }\n      };\n\n      var column = function column(colIdx, name, operator, matched) {\n        var size, i, ien;\n\n        if (!operator) {\n          columns[colIdx].includeIn.push(name);\n        } else if (operator === 'max-') {\n          // Add this breakpoint and all smaller\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width <= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'min-') {\n          // Add this breakpoint and all larger\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width >= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'not-') {\n          // Add all but this breakpoint\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].name.indexOf(matched) === -1) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        }\n      }; // Loop over each column and determine if it has a responsive control\n      // class\n\n\n      columns.each(function (col, i) {\n        var classNames = col.className.split(' ');\n        var hasClass = false; // Split the class name up so multiple rules can be applied if needed\n\n        for (var k = 0, ken = classNames.length; k < ken; k++) {\n          var className = $.trim(classNames[k]);\n\n          if (className === 'all') {\n            // Include in all\n            hasClass = true;\n            col.includeIn = $.map(breakpoints, function (a) {\n              return a.name;\n            });\n            return;\n          } else if (className === 'none' || col.never) {\n            // Include in none (default) and no auto\n            hasClass = true;\n            return;\n          } else if (className === 'control') {\n            // Special column that is only visible, when one of the other\n            // columns is hidden. This is used for the details control\n            hasClass = true;\n            col.control = true;\n            return;\n          }\n\n          $.each(breakpoints, function (j, breakpoint) {\n            // Does this column have a class that matches this breakpoint?\n            var brokenPoint = breakpoint.name.split('-');\n            var re = new RegExp('(min\\\\-|max\\\\-|not\\\\-)?(' + brokenPoint[0] + ')(\\\\-[_a-zA-Z0-9])?');\n            var match = className.match(re);\n\n            if (match) {\n              hasClass = true;\n\n              if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {\n                // Class name matches breakpoint name fully\n                column(i, breakpoint.name, match[1], match[2] + match[3]);\n              } else if (match[2] === brokenPoint[0] && !match[3]) {\n                // Class name matched primary breakpoint name with no qualifier\n                column(i, breakpoint.name, match[1], match[2]);\n              }\n            }\n          });\n        } // If there was no control class, then automatic sizing is used\n\n\n        if (!hasClass) {\n          col.auto = true;\n        }\n      });\n      this.s.columns = columns;\n    },\n\n    /**\n     * Show the details for the child row\n     *\n     * @param  {DataTables.Api} row    API instance for the row\n     * @param  {boolean}        update Update flag\n     * @private\n     */\n    _detailsDisplay: function _detailsDisplay(row, update) {\n      var that = this;\n      var dt = this.s.dt;\n      var res = this.c.details.display(row, update, function () {\n        return that.c.details.renderer(dt, row[0], that._detailsObj(row[0]));\n      });\n\n      if (res === true || res === false) {\n        $(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);\n      }\n    },\n\n    /**\n     * Initialisation for the details handler\n     *\n     * @private\n     */\n    _detailsInit: function _detailsInit() {\n      var that = this;\n      var dt = this.s.dt;\n      var details = this.c.details; // The inline type always uses the first child as the target\n\n      if (details.type === 'inline') {\n        details.target = 'td:first-child';\n      } // Keyboard accessibility\n\n\n      dt.on('draw.dtr', function () {\n        that._tabIndexes();\n      });\n\n      that._tabIndexes(); // Initial draw has already happened\n\n\n      $(dt.table().body()).on('keyup.dtr', 'td', function (e) {\n        if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {\n          $(this).click();\n        }\n      }); // type.target can be a string jQuery selector or a column index\n\n      var target = details.target;\n      var selector = typeof target === 'string' ? target : 'td'; // Click handler to show / hide the details rows when they are available\n\n      $(dt.table().body()).on('mousedown.dtr', selector, function (e) {\n        // For mouse users, prevent the focus ring from showing\n        e.preventDefault();\n      }).on('click.dtr', selector, function () {\n        // If the table is not collapsed (i.e. there is no hidden columns)\n        // then take no action\n        if (!$(dt.table().node()).hasClass('collapsed')) {\n          return;\n        } // Check that the row is actually a DataTable's controlled node\n\n\n        if (!dt.row($(this).closest('tr')).length) {\n          return;\n        } // For column index, we determine if we should act or not in the\n        // handler - otherwise it is already okay\n\n\n        if (typeof target === 'number') {\n          var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;\n\n          if (dt.cell(this).index().column !== targetIdx) {\n            return;\n          }\n        } // $().closest() includes itself in its check\n\n\n        var row = dt.row($(this).closest('tr')); // The renderer is given as a function so the caller can execute it\n        // only when they need (i.e. if hiding there is no point is running\n        // the renderer)\n\n        that._detailsDisplay(row, false);\n      });\n    },\n\n    /**\n     * Get the details to pass to a renderer for a row\n     * @param  {int} rowIdx Row index\n     * @private\n     */\n    _detailsObj: function _detailsObj(rowIdx) {\n      var that = this;\n      var dt = this.s.dt;\n      return $.map(this.s.columns, function (col, i) {\n        if (col.never) {\n          return;\n        }\n\n        return {\n          title: dt.settings()[0].aoColumns[i].sTitle,\n          data: dt.cell(rowIdx, i).render(that.c.orthogonal),\n          hidden: dt.column(i).visible() && !that.s.current[i]\n        };\n      });\n    },\n\n    /**\n     * Find a breakpoint object from a name\n     *\n     * @param  {string} name Breakpoint name to find\n     * @return {object}      Breakpoint description object\n     * @private\n     */\n    _find: function _find(name) {\n      var breakpoints = this.c.breakpoints;\n\n      for (var i = 0, ien = breakpoints.length; i < ien; i++) {\n        if (breakpoints[i].name === name) {\n          return breakpoints[i];\n        }\n      }\n    },\n\n    /**\n     * Re-create the contents of the child rows as the display has changed in\n     * some way.\n     *\n     * @private\n     */\n    _redrawChildren: function _redrawChildren() {\n      var that = this;\n      var dt = this.s.dt;\n      dt.rows({\n        page: 'current'\n      }).iterator('row', function (settings, idx) {\n        var row = dt.row(idx);\n\n        that._detailsDisplay(dt.row(idx), true);\n      });\n    },\n\n    /**\n     * Alter the table display for a resized viewport. This involves first\n     * determining what breakpoint the window currently is in, getting the\n     * column visibilities to apply and then setting them.\n     *\n     * @private\n     */\n    _resize: function _resize() {\n      var that = this;\n      var dt = this.s.dt;\n      var width = $(window).width();\n      var breakpoints = this.c.breakpoints;\n      var breakpoint = breakpoints[0].name;\n      var columns = this.s.columns;\n      var i, ien;\n      var oldVis = this.s.current.slice(); // Determine what breakpoint we are currently at\n\n      for (i = breakpoints.length - 1; i >= 0; i--) {\n        if (width <= breakpoints[i].width) {\n          breakpoint = breakpoints[i].name;\n          break;\n        }\n      } // Show the columns for that break point\n\n\n      var columnsVis = this._columnsVisiblity(breakpoint);\n\n      this.s.current = columnsVis; // Set the class before the column visibility is changed so event\n      // listeners know what the state is. Need to determine if there are\n      // any columns that are not visible but can be shown\n\n      var collapsedClass = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columnsVis[i] === false && !columns[i].never) {\n          collapsedClass = true;\n          break;\n        }\n      }\n\n      $(dt.table().node()).toggleClass('collapsed', collapsedClass);\n      var changed = false;\n      dt.columns().eq(0).each(function (colIdx, i) {\n        if (columnsVis[i] !== oldVis[i]) {\n          changed = true;\n\n          that._setColumnVis(colIdx, columnsVis[i]);\n        }\n      });\n\n      if (changed) {\n        this._redrawChildren();\n      }\n    },\n\n    /**\n     * Determine the width of each column in the table so the auto column hiding\n     * has that information to work with. This method is never going to be 100%\n     * perfect since column widths can change slightly per page, but without\n     * seriously compromising performance this is quite effective.\n     *\n     * @private\n     */\n    _resizeAuto: function _resizeAuto() {\n      var dt = this.s.dt;\n      var columns = this.s.columns; // Are we allowed to do auto sizing?\n\n      if (!this.c.auto) {\n        return;\n      } // Are there any columns that actually need auto-sizing, or do they all\n      // have classes defined\n\n\n      if ($.inArray(true, $.map(columns, function (c) {\n        return c.auto;\n      })) === -1) {\n        return;\n      } // Clone the table with the current data in it\n\n\n      var tableWidth = dt.table().node().offsetWidth;\n      var columnWidths = dt.columns;\n      var clonedTable = dt.table().node().cloneNode(false);\n      var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);\n      var clonedBody = $(dt.table().body().cloneNode(false)).appendTo(clonedTable); // Header\n\n      var headerCells = dt.columns().header().filter(function (idx) {\n        return dt.column(idx).visible();\n      }).to$().clone(false).css('display', 'table-cell'); // Body rows - we don't need to take account of DataTables' column\n      // visibility since we implement our own here (hence the `display` set)\n\n      $(clonedBody).append($(dt.rows({\n        page: 'current'\n      }).nodes()).clone(false)).find('th, td').css('display', ''); // Footer\n\n      var footer = dt.table().footer();\n\n      if (footer) {\n        var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);\n        var footerCells = dt.columns().header().filter(function (idx) {\n          return dt.column(idx).visible();\n        }).to$().clone(false).css('display', 'table-cell');\n        $('<tr/>').append(footerCells).appendTo(clonedFooter);\n      }\n\n      $('<tr/>').append(headerCells).appendTo(clonedHeader); // In the inline case extra padding is applied to the first column to\n      // give space for the show / hide icon. We need to use this in the\n      // calculation\n\n      if (this.c.details.type === 'inline') {\n        $(clonedTable).addClass('dtr-inline collapsed');\n      }\n\n      var inserted = $('<div/>').css({\n        width: 1,\n        height: 1,\n        overflow: 'hidden'\n      }).append(clonedTable);\n      inserted.insertBefore(dt.table().node()); // The cloned header now contains the smallest that each column can be\n\n      headerCells.each(function (i) {\n        var idx = dt.column.index('fromVisible', i);\n        columns[idx].minWidth = this.offsetWidth || 0;\n      });\n      inserted.remove();\n    },\n\n    /**\n     * Set a column's visibility.\n     *\n     * We don't use DataTables' column visibility controls in order to ensure\n     * that column visibility can Responsive can no-exist. Since only IE8+ is\n     * supported (and all evergreen browsers of course) the control of the\n     * display attribute works well.\n     *\n     * @param {integer} col      Column index\n     * @param {boolean} showHide Show or hide (true or false)\n     * @private\n     */\n    _setColumnVis: function _setColumnVis(col, showHide) {\n      var dt = this.s.dt;\n      var display = showHide ? '' : 'none'; // empty string will remove the attr\n\n      $(dt.column(col).header()).css('display', display);\n      $(dt.column(col).footer()).css('display', display);\n      dt.column(col).nodes().to$().css('display', display);\n    },\n\n    /**\n     * Update the cell tab indexes for keyboard accessibility. This is called on\n     * every table draw - that is potentially inefficient, but also the least\n     * complex option given that column visibility can change on the fly. Its a\n     * shame user-focus was removed from CSS 3 UI, as it would have solved this\n     * issue with a single CSS statement.\n     *\n     * @private\n     */\n    _tabIndexes: function _tabIndexes() {\n      var dt = this.s.dt;\n      var cells = dt.cells({\n        page: 'current'\n      }).nodes().to$();\n      var ctx = dt.settings()[0];\n      var target = this.c.details.target;\n      cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');\n      var selector = typeof target === 'number' ? ':eq(' + target + ')' : target;\n      $(selector, dt.rows({\n        page: 'current'\n      }).nodes()).attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);\n    }\n  });\n  /**\n   * List of default breakpoints. Each item in the array is an object with two\n   * properties:\n   *\n   * * `name` - the breakpoint name.\n   * * `width` - the breakpoint width\n   *\n   * @name Responsive.breakpoints\n   * @static\n   */\n\n  Responsive.breakpoints = [{\n    name: 'desktop',\n    width: Infinity\n  }, {\n    name: 'tablet-l',\n    width: 1024\n  }, {\n    name: 'tablet-p',\n    width: 768\n  }, {\n    name: 'mobile-l',\n    width: 480\n  }, {\n    name: 'mobile-p',\n    width: 320\n  }];\n  /**\n   * Display methods - functions which define how the hidden data should be shown\n   * in the table.\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.display = {\n    childRow: function childRow(row, update, render) {\n      if (update) {\n        if ($(row.node()).hasClass('parent')) {\n          row.child(render(), 'child').show();\n          return true;\n        }\n      } else {\n        if (!row.child.isShown()) {\n          row.child(render(), 'child').show();\n          $(row.node()).addClass('parent');\n          return true;\n        } else {\n          row.child(false);\n          $(row.node()).removeClass('parent');\n          return false;\n        }\n      }\n    },\n    childRowImmediate: function childRowImmediate(row, update, render) {\n      if (!update && row.child.isShown() || !row.responsive.hasHidden()) {\n        // User interaction and the row is show, or nothing to show\n        row.child(false);\n        $(row.node()).removeClass('parent');\n        return false;\n      } else {\n        // Display\n        row.child(render(), 'child').show();\n        $(row.node()).addClass('parent');\n        return true;\n      }\n    },\n    // This is a wrapper so the modal options for Bootstrap and jQuery UI can\n    // have options passed into them. This specific one doesn't need to be a\n    // function but it is for consistency in the `modal` name\n    modal: function modal(options) {\n      return function (row, update, render) {\n        if (!update) {\n          // Show a modal\n          var close = function close() {\n            modal.remove(); // will tidy events for us\n\n            $(document).off('keypress.dtr');\n          };\n\n          var modal = $('<div class=\"dtr-modal\"/>').append($('<div class=\"dtr-modal-display\"/>').append($('<div class=\"dtr-modal-content\"/>').append(render())).append($('<div class=\"dtr-modal-close\">&times;</div>').click(function () {\n            close();\n          }))).append($('<div class=\"dtr-modal-background\"/>').click(function () {\n            close();\n          })).appendTo('body');\n\n          if (options && options.header) {\n            modal.find('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');\n          }\n\n          $(document).on('keyup.dtr', function (e) {\n            if (e.keyCode === 27) {\n              e.stopPropagation();\n              close();\n            }\n          });\n        } else {\n          $('div.dtr-modal-content').empty().append(render());\n        }\n      };\n    }\n  };\n  /**\n   * Responsive default settings for initialisation\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.defaults = {\n    /**\n     * List of breakpoints for the instance. Note that this means that each\n     * instance can have its own breakpoints. Additionally, the breakpoints\n     * cannot be changed once an instance has been creased.\n     *\n     * @type {Array}\n     * @default Takes the value of `Responsive.breakpoints`\n     */\n    breakpoints: Responsive.breakpoints,\n\n    /**\n     * Enable / disable auto hiding calculations. It can help to increase\n     * performance slightly if you disable this option, but all columns would\n     * need to have breakpoint classes assigned to them\n     *\n     * @type {Boolean}\n     * @default  `true`\n     */\n    auto: true,\n\n    /**\n     * Details control. If given as a string value, the `type` property of the\n     * default object is set to that value, and the defaults used for the rest\n     * of the object - this is for ease of implementation.\n     *\n     * The object consists of the following properties:\n     *\n     * * `display` - A function that is used to show and hide the hidden details\n     * * `renderer` - function that is called for display of the child row data.\n     *   The default function will show the data from the hidden columns\n     * * `target` - Used as the selector for what objects to attach the child\n     *   open / close to\n     * * `type` - `false` to disable the details display, `inline` or `column`\n     *   for the two control types\n     *\n     * @type {Object|string}\n     */\n    details: {\n      display: Responsive.display.childRow,\n      renderer: function renderer(api, rowIdx, columns) {\n        var data = $.map(columns, function (col, i) {\n          return col.hidden ? '<li data-dtr-index=\"' + i + '\">' + '<span class=\"dtr-title\">' + col.title + '</span> ' + '<span class=\"dtr-data\">' + col.data + '</span>' + '</li>' : '';\n        }).join('');\n        return data ? $('<ul data-dtr-index=\"' + rowIdx + '\"/>').append(data) : false;\n      },\n      target: 0,\n      type: 'inline'\n    },\n\n    /**\n     * Orthogonal data request option. This is used to define the data type\n     * requested when Responsive gets the data to show in the child row.\n     *\n     * @type {String}\n     */\n    orthogonal: 'display'\n  };\n  /*\n   * API\n   */\n\n  var Api = $.fn.dataTable.Api; // Doesn't do anything - work around for a bug in DT... Not documented\n\n  Api.register('responsive()', function () {\n    return this;\n  });\n  Api.register('responsive.index()', function (li) {\n    li = $(li);\n    return {\n      column: li.data('dtr-index'),\n      row: li.parent().data('dtr-index')\n    };\n  });\n  Api.register('responsive.rebuild()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._classLogic();\n      }\n    });\n  });\n  Api.register('responsive.recalc()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._resizeAuto();\n\n        ctx._responsive._resize();\n      }\n    });\n  });\n  Api.register('responsive.hasHidden()', function () {\n    var ctx = this.context[0];\n    return ctx._responsive ? $.inArray(false, ctx._responsive.s.current) !== -1 : false;\n  });\n  /**\n   * Version information\n   *\n   * @name Responsive.version\n   * @static\n   */\n\n  Responsive.version = '2.0.0';\n  $.fn.dataTable.Responsive = Responsive;\n  $.fn.DataTable.Responsive = Responsive; // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n  $(document).on('init.dt.dtr', function (e, settings, json) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    if ($(settings.nTable).hasClass('responsive') || $(settings.nTable).hasClass('dt-responsive') || settings.oInit.responsive || DataTable.defaults.responsive) {\n      var init = settings.oInit.responsive;\n\n      if (init !== false) {\n        new Responsive(settings, $.isPlainObject(init) ? init : {});\n      }\n    }\n  });\n  return Responsive;\n});","map":{"version":3,"sources":["/Users/david/Winner-Stock/app/javascript/dataTables/dataTables.responsive.js"],"names":["factory","define","amd","$","window","document","exports","module","root","fn","dataTable","require","jQuery","undefined","DataTable","Responsive","settings","opts","versionCheck","s","dt","Api","columns","current","responsive","details","type","c","extend","defaults","_constructor","prototype","that","dtPrivateSettings","_responsive","on","util","throttle","_resize","oApi","_fnCallbackReg","tr","data","idx","inArray","each","i","column","index","css","off","table","body","val","_setColumnVis","breakpoints","sort","a","b","width","_classLogic","_resizeAuto","_detailsInit","e","ctx","col","vis","_redrawChildren","node","addClass","drop","_columnsVisiblity","breakpoint","ien","order","map","columnIdx","priority","display","auto","minWidth","includeIn","requiredWidth","length","scrolling","oScroll","bar","sY","sX","iBarWidth","widthAvailable","container","offsetWidth","usedWidth","control","empty","colIdx","showControl","never","calc","eq","className","header","aoColumns","responsivePriority","match","add","name","push","operator","matched","size","_find","indexOf","classNames","split","hasClass","k","ken","trim","j","brokenPoint","re","RegExp","_detailsDisplay","row","update","res","renderer","_detailsObj","triggerHandler","target","_tabIndexes","keyCode","click","selector","preventDefault","closest","targetIdx","cell","rowIdx","title","sTitle","render","orthogonal","hidden","visible","rows","page","iterator","oldVis","slice","columnsVis","collapsedClass","toggleClass","changed","tableWidth","columnWidths","clonedTable","cloneNode","clonedHeader","appendTo","clonedBody","headerCells","filter","to$","clone","append","nodes","find","footer","clonedFooter","footerCells","inserted","height","overflow","insertBefore","remove","showHide","cells","removeData","attr","iTabIndex","Infinity","childRow","child","show","isShown","removeClass","childRowImmediate","hasHidden","modal","options","close","prepend","stopPropagation","api","join","register","li","parent","context","version","json","namespace","nTable","oInit","init","isPlainObject"],"mappings":"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","sourcesContent":["/*! Responsive 2.0.0\n * 2014-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.0.0\n * @file        dataTables.responsive.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2014-2015 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function( factory ){\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery', 'datatables.net'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ || ! $.fn.dataTable ) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/**\n * Responsive is a plug-in for the DataTables library that makes use of\n * DataTables' ability to change the visibility of columns, changing the\n * visibility of columns so the displayed columns fit into the table container.\n * The end result is that complex tables will be dynamically adjusted to fit\n * into the viewport, be it on a desktop, tablet or mobile browser.\n *\n * Responsive for DataTables has two modes of operation, which can used\n * individually or combined:\n *\n * * Class name based control - columns assigned class names that match the\n *   breakpoint logic can be shown / hidden as required for each breakpoint.\n * * Automatic control - columns are automatically hidden when there is no\n *   room left to display them. Columns removed from the right.\n *\n * In additional to column visibility control, Responsive also has built into\n * options to use DataTables' child row display to show / hide the information\n * from the table that has been hidden. There are also two modes of operation\n * for this child row display:\n *\n * * Inline - when the control element that the user can use to show / hide\n *   child rows is displayed inside the first column of the table.\n * * Column - where a whole column is dedicated to be the show / hide control.\n *\n * Initialisation of Responsive is performed by:\n *\n * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n *   Responsive will automatically be initialised with the default configuration\n *   options when the DataTable is created.\n * * Using the `responsive` option in the DataTables configuration options. This\n *   can also be used to specify the configuration options, or simply set to\n *   `true` to use the defaults.\n *\n *  @class\n *  @param {object} settings DataTables settings object for the host table\n *  @param {object} [opts] Configuration options\n *  @requires jQuery 1.7+\n *  @requires DataTables 1.10.3+\n *\n *  @example\n *      $('#example').DataTable( {\n *        responsive: true\n *      } );\n *    } );\n */\nvar Responsive = function ( settings, opts ) {\n\t// Sanity check that we are using DataTables 1.10 or newer\n\tif ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.3' ) ) {\n\t\tthrow 'DataTables Responsive requires DataTables 1.10.3 or newer';\n\t}\n\n\tthis.s = {\n\t\tdt: new DataTable.Api( settings ),\n\t\tcolumns: [],\n\t\tcurrent: []\n\t};\n\n\t// Check if responsive has already been initialised on this table\n\tif ( this.s.dt.settings()[0].responsive ) {\n\t\treturn;\n\t}\n\n\t// details is an object, but for simplicity the user can give it as a string\n\tif ( opts && typeof opts.details === 'string' ) {\n\t\topts.details = { type: opts.details };\n\t}\n\n\tthis.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );\n\tsettings.responsive = this;\n\tthis._constructor();\n};\n\n$.extend( Responsive.prototype, {\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Initialise the Responsive instance\n\t *\n\t * @private\n\t */\n\t_constructor: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar dtPrivateSettings = dt.settings()[0];\n\n\t\tdt.settings()[0]._responsive = this;\n\n\t\t// Use DataTables' throttle function to avoid processor thrashing on\n\t\t// resize\n\t\t$(window).on( 'resize.dtr orientationchange.dtr', DataTable.util.throttle( function () {\n\t\t\tthat._resize();\n\t\t} ) );\n\n\t\t// DataTables doesn't currently trigger an event when a row is added, so\n\t\t// we need to hook into its private API to enforce the hidden rows when\n\t\t// new data is added\n\t\tdtPrivateSettings.oApi._fnCallbackReg( dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {\n\t\t\tif ( $.inArray( false, that.s.current ) !== -1 ) {\n\t\t\t\t$('td, th', tr).each( function ( i ) {\n\t\t\t\t\tvar idx = dt.column.index( 'toData', i );\n\n\t\t\t\t\tif ( that.s.current[idx] === false ) {\n\t\t\t\t\t\t$(this).css('display', 'none');\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\t// Destroy event handler\n\t\tdt.on( 'destroy.dtr', function () {\n\t\t\tdt.off( '.dtr' );\n\t\t\t$( dt.table().body() ).off( '.dtr' );\n\t\t\t$(window).off( 'resize.dtr orientationchange.dtr' );\n\n\t\t\t// Restore the columns that we've hidden\n\t\t\t$.each( that.s.current, function ( i, val ) {\n\t\t\t\tif ( val === false ) {\n\t\t\t\t\tthat._setColumnVis( i, true );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// Reorder the breakpoints array here in case they have been added out\n\t\t// of order\n\t\tthis.c.breakpoints.sort( function (a, b) {\n\t\t\treturn a.width < b.width ? 1 :\n\t\t\t\ta.width > b.width ? -1 : 0;\n\t\t} );\n\n\t\tthis._classLogic();\n\t\tthis._resizeAuto();\n\n\t\t// Details handler\n\t\tvar details = this.c.details;\n\t\tif ( details.type !== false ) {\n\t\t\tthat._detailsInit();\n\n\t\t\t// DataTables will trigger this event on every column it shows and\n\t\t\t// hides individually\n\t\t\tdt.on( 'column-visibility.dtr', function (e, ctx, col, vis) {\n\t\t\t\tthat._classLogic();\n\t\t\t\tthat._resizeAuto();\n\t\t\t\tthat._resize();\n\t\t\t} );\n\n\t\t\t// Redraw the details box on each draw which will happen if the data\n\t\t\t// has changed. This is used until DataTables implements a native\n\t\t\t// `updated` event for rows\n\t\t\tdt.on( 'draw.dtr', function () {\n\t\t\t\tthat._redrawChildren();\n\t\t\t} );\n\n\t\t\t$(dt.table().node()).addClass( 'dtr-'+details.type );\n\t\t}\n\n\t\tdt.on( 'column-reorder.dtr', function (e, settings, details) {\n\t\t\t// This requires ColReorder 1.2.1 or newer\n\t\t\tif ( details.drop ) {\n\t\t\t\tthat._classLogic();\n\t\t\t\tthat._resizeAuto();\n\t\t\t\tthat._resize();\n\t\t\t}\n\t\t} );\n\n\t\t// First pass - draw the table for the current viewport size\n\t\tthis._resize();\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\n\t/**\n\t * Calculate the visibility for the columns in a table for a given\n\t * breakpoint. The result is pre-determined based on the class logic if\n\t * class names are used to control all columns, but the width of the table\n\t * is also used if there are columns which are to be automatically shown\n\t * and hidden.\n\t *\n\t * @param  {string} breakpoint Breakpoint name to use for the calculation\n\t * @return {array} Array of boolean values initiating the visibility of each\n\t *   column.\n\t *  @private\n\t */\n\t_columnsVisiblity: function ( breakpoint )\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar columns = this.s.columns;\n\t\tvar i, ien;\n\n\t\t// Create an array that defines the column ordering based first on the\n\t\t// column's priority, and secondly the column index. This allows the\n\t\t// columns to be removed from the right if the priority matches\n\t\tvar order = columns\n\t\t\t.map( function ( col, idx ) {\n\t\t\t\treturn {\n\t\t\t\t\tcolumnIdx: idx,\n\t\t\t\t\tpriority: col.priority\n\t\t\t\t};\n\t\t\t} )\n\t\t\t.sort( function ( a, b ) {\n\t\t\t\tif ( a.priority !== b.priority ) {\n\t\t\t\t\treturn a.priority - b.priority;\n\t\t\t\t}\n\t\t\t\treturn a.columnIdx - b.columnIdx;\n\t\t\t} );\n\n\n\t\t// Class logic - determine which columns are in this breakpoint based\n\t\t// on the classes. If no class control (i.e. `auto`) then `-` is used\n\t\t// to indicate this to the rest of the function\n\t\tvar display = $.map( columns, function ( col ) {\n\t\t\treturn col.auto && col.minWidth === null ?\n\t\t\t\tfalse :\n\t\t\t\tcol.auto === true ?\n\t\t\t\t\t'-' :\n\t\t\t\t\t$.inArray( breakpoint, col.includeIn ) !== -1;\n\t\t} );\n\n\t\t// Auto column control - first pass: how much width is taken by the\n\t\t// ones that must be included from the non-auto columns\n\t\tvar requiredWidth = 0;\n\t\tfor ( i=0, ien=display.length ; i<ien ; i++ ) {\n\t\t\tif ( display[i] === true ) {\n\t\t\t\trequiredWidth += columns[i].minWidth;\n\t\t\t}\n\t\t}\n\n\t\t// Second pass, use up any remaining width for other columns. For\n\t\t// scrolling tables we need to subtract the width of the scrollbar. It\n\t\t// may not be requires which makes this sub-optimal, but it would\n\t\t// require another full redraw to make complete use of those extra few\n\t\t// pixels\n\t\tvar scrolling = dt.settings()[0].oScroll;\n\t\tvar bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n\t\tvar widthAvailable = dt.table().container().offsetWidth - bar;\n\t\tvar usedWidth = widthAvailable - requiredWidth;\n\n\t\t// Control column needs to always be included. This makes it sub-\n\t\t// optimal in terms of using the available with, but to stop layout\n\t\t// thrashing or overflow. Also we need to account for the control column\n\t\t// width first so we know how much width is available for the other\n\t\t// columns, since the control column might not be the first one shown\n\t\tfor ( i=0, ien=display.length ; i<ien ; i++ ) {\n\t\t\tif ( columns[i].control ) {\n\t\t\t\tusedWidth -= columns[i].minWidth;\n\t\t\t}\n\t\t}\n\n\t\t// Allow columns to be shown (counting by priority and then right to\n\t\t// left) until we run out of room\n\t\tvar empty = false;\n\t\tfor ( i=0, ien=order.length ; i<ien ; i++ ) {\n\t\t\tvar colIdx = order[i].columnIdx;\n\n\t\t\tif ( display[colIdx] === '-' && ! columns[colIdx].control && columns[colIdx].minWidth ) {\n\t\t\t\t// Once we've found a column that won't fit we don't let any\n\t\t\t\t// others display either, or columns might disappear in the\n\t\t\t\t// middle of the table\n\t\t\t\tif ( empty || usedWidth - columns[colIdx].minWidth < 0 ) {\n\t\t\t\t\tempty = true;\n\t\t\t\t\tdisplay[colIdx] = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdisplay[colIdx] = true;\n\t\t\t\t}\n\n\t\t\t\tusedWidth -= columns[colIdx].minWidth;\n\t\t\t}\n\t\t}\n\n\t\t// Determine if the 'control' column should be shown (if there is one).\n\t\t// This is the case when there is a hidden column (that is not the\n\t\t// control column). The two loops look inefficient here, but they are\n\t\t// trivial and will fly through. We need to know the outcome from the\n\t\t// first , before the action in the second can be taken\n\t\tvar showControl = false;\n\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tif ( ! columns[i].control && ! columns[i].never && ! display[i] ) {\n\t\t\t\tshowControl = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tif ( columns[i].control ) {\n\t\t\t\tdisplay[i] = showControl;\n\t\t\t}\n\t\t}\n\n\t\t// Finally we need to make sure that there is at least one column that\n\t\t// is visible\n\t\tif ( $.inArray( true, display ) === -1 ) {\n\t\t\tdisplay[0] = true;\n\t\t}\n\n\t\treturn display;\n\t},\n\n\n\t/**\n\t * Create the internal `columns` array with information about the columns\n\t * for the table. This includes determining which breakpoints the column\n\t * will appear in, based upon class names in the column, which makes up the\n\t * vast majority of this method.\n\t *\n\t * @private\n\t */\n\t_classLogic: function ()\n\t{\n\t\tvar that = this;\n\t\tvar calc = {};\n\t\tvar breakpoints = this.c.breakpoints;\n\t\tvar dt = this.s.dt;\n\t\tvar columns = dt.columns().eq(0).map( function (i) {\n\t\t\tvar column = this.column(i);\n\t\t\tvar className = column.header().className;\n\t\t\tvar priority = dt.settings()[0].aoColumns[i].responsivePriority;\n\n\t\t\tif ( priority === undefined ) {\n\t\t\t\tpriority = $(column.header).data('priority') !== undefined ?\n\t\t\t\t\t$(column.header).data('priority') * 1 :\n\t\t\t\t\t10000;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tclassName: className,\n\t\t\t\tincludeIn: [],\n\t\t\t\tauto:      false,\n\t\t\t\tcontrol:   false,\n\t\t\t\tnever:     className.match(/\\bnever\\b/) ? true : false,\n\t\t\t\tpriority:  priority\n\t\t\t};\n\t\t} );\n\n\t\t// Simply add a breakpoint to `includeIn` array, ensuring that there are\n\t\t// no duplicates\n\t\tvar add = function ( colIdx, name ) {\n\t\t\tvar includeIn = columns[ colIdx ].includeIn;\n\n\t\t\tif ( $.inArray( name, includeIn ) === -1 ) {\n\t\t\t\tincludeIn.push( name );\n\t\t\t}\n\t\t};\n\n\t\tvar column = function ( colIdx, name, operator, matched ) {\n\t\t\tvar size, i, ien;\n\n\t\t\tif ( ! operator ) {\n\t\t\t\tcolumns[ colIdx ].includeIn.push( name );\n\t\t\t}\n\t\t\telse if ( operator === 'max-' ) {\n\t\t\t\t// Add this breakpoint and all smaller\n\t\t\t\tsize = that._find( name ).width;\n\n\t\t\t\tfor ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( breakpoints[i].width <= size ) {\n\t\t\t\t\t\tadd( colIdx, breakpoints[i].name );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( operator === 'min-' ) {\n\t\t\t\t// Add this breakpoint and all larger\n\t\t\t\tsize = that._find( name ).width;\n\n\t\t\t\tfor ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( breakpoints[i].width >= size ) {\n\t\t\t\t\t\tadd( colIdx, breakpoints[i].name );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( operator === 'not-' ) {\n\t\t\t\t// Add all but this breakpoint\n\t\t\t\tfor ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( breakpoints[i].name.indexOf( matched ) === -1 ) {\n\t\t\t\t\t\tadd( colIdx, breakpoints[i].name );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop over each column and determine if it has a responsive control\n\t\t// class\n\t\tcolumns.each( function ( col, i ) {\n\t\t\tvar classNames = col.className.split(' ');\n\t\t\tvar hasClass = false;\n\n\t\t\t// Split the class name up so multiple rules can be applied if needed\n\t\t\tfor ( var k=0, ken=classNames.length ; k<ken ; k++ ) {\n\t\t\t\tvar className = $.trim( classNames[k] );\n\n\t\t\t\tif ( className === 'all' ) {\n\t\t\t\t\t// Include in all\n\t\t\t\t\thasClass = true;\n\t\t\t\t\tcol.includeIn = $.map( breakpoints, function (a) {\n\t\t\t\t\t\treturn a.name;\n\t\t\t\t\t} );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if ( className === 'none' || col.never ) {\n\t\t\t\t\t// Include in none (default) and no auto\n\t\t\t\t\thasClass = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if ( className === 'control' ) {\n\t\t\t\t\t// Special column that is only visible, when one of the other\n\t\t\t\t\t// columns is hidden. This is used for the details control\n\t\t\t\t\thasClass = true;\n\t\t\t\t\tcol.control = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t$.each( breakpoints, function ( j, breakpoint ) {\n\t\t\t\t\t// Does this column have a class that matches this breakpoint?\n\t\t\t\t\tvar brokenPoint = breakpoint.name.split('-');\n\t\t\t\t\tvar re = new RegExp( '(min\\\\-|max\\\\-|not\\\\-)?('+brokenPoint[0]+')(\\\\-[_a-zA-Z0-9])?' );\n\t\t\t\t\tvar match = className.match( re );\n\n\t\t\t\t\tif ( match ) {\n\t\t\t\t\t\thasClass = true;\n\n\t\t\t\t\t\tif ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {\n\t\t\t\t\t\t\t// Class name matches breakpoint name fully\n\t\t\t\t\t\t\tcolumn( i, breakpoint.name, match[1], match[2]+match[3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( match[2] === brokenPoint[0] && ! match[3] ) {\n\t\t\t\t\t\t\t// Class name matched primary breakpoint name with no qualifier\n\t\t\t\t\t\t\tcolumn( i, breakpoint.name, match[1], match[2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// If there was no control class, then automatic sizing is used\n\t\t\tif ( ! hasClass ) {\n\t\t\t\tcol.auto = true;\n\t\t\t}\n\t\t} );\n\n\t\tthis.s.columns = columns;\n\t},\n\n\n\t/**\n\t * Show the details for the child row\n\t *\n\t * @param  {DataTables.Api} row    API instance for the row\n\t * @param  {boolean}        update Update flag\n\t * @private\n\t */\n\t_detailsDisplay: function ( row, update )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\n\t\tvar res = this.c.details.display( row, update, function () {\n\t\t\treturn that.c.details.renderer(\n\t\t\t\tdt, row[0], that._detailsObj(row[0])\n\t\t\t);\n\t\t} );\n\n\t\tif ( res === true || res === false ) {\n\t\t\t$(dt.table().node()).triggerHandler( 'responsive-display.dt', [dt, row, res, update] );\n\t\t}\n\t},\n\n\n\t/**\n\t * Initialisation for the details handler\n\t *\n\t * @private\n\t */\n\t_detailsInit: function ()\n\t{\n\t\tvar that    = this;\n\t\tvar dt      = this.s.dt;\n\t\tvar details = this.c.details;\n\n\t\t// The inline type always uses the first child as the target\n\t\tif ( details.type === 'inline' ) {\n\t\t\tdetails.target = 'td:first-child';\n\t\t}\n\n\t\t// Keyboard accessibility\n\t\tdt.on( 'draw.dtr', function () {\n\t\t\tthat._tabIndexes();\n\t\t} );\n\t\tthat._tabIndexes(); // Initial draw has already happened\n\n\t\t$( dt.table().body() ).on( 'keyup.dtr', 'td', function (e) {\n\t\t\tif ( e.keyCode === 13 && $(this).data('dtr-keyboard') ) {\n\t\t\t\t$(this).click();\n\t\t\t}\n\t\t} );\n\n\t\t// type.target can be a string jQuery selector or a column index\n\t\tvar target   = details.target;\n\t\tvar selector = typeof target === 'string' ? target : 'td';\n\n\t\t// Click handler to show / hide the details rows when they are available\n\t\t$( dt.table().body() )\n\t\t\t.on( 'mousedown.dtr', selector, function (e) {\n\t\t\t\t// For mouse users, prevent the focus ring from showing\n\t\t\t\te.preventDefault();\n\t\t\t} )\n\t\t\t.on( 'click.dtr', selector, function () {\n\t\t\t\t// If the table is not collapsed (i.e. there is no hidden columns)\n\t\t\t\t// then take no action\n\t\t\t\tif ( ! $(dt.table().node()).hasClass('collapsed' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check that the row is actually a DataTable's controlled node\n\t\t\t\tif ( ! dt.row( $(this).closest('tr') ).length ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// For column index, we determine if we should act or not in the\n\t\t\t\t// handler - otherwise it is already okay\n\t\t\t\tif ( typeof target === 'number' ) {\n\t\t\t\t\tvar targetIdx = target < 0 ?\n\t\t\t\t\t\tdt.columns().eq(0).length + target :\n\t\t\t\t\t\ttarget;\n\n\t\t\t\t\tif ( dt.cell( this ).index().column !== targetIdx ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// $().closest() includes itself in its check\n\t\t\t\tvar row = dt.row( $(this).closest('tr') );\n\n\t\t\t\t// The renderer is given as a function so the caller can execute it\n\t\t\t\t// only when they need (i.e. if hiding there is no point is running\n\t\t\t\t// the renderer)\n\t\t\t\tthat._detailsDisplay( row, false );\n\t\t\t} );\n\t},\n\n\n\t/**\n\t * Get the details to pass to a renderer for a row\n\t * @param  {int} rowIdx Row index\n\t * @private\n\t */\n\t_detailsObj: function ( rowIdx )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\n\t\treturn $.map( this.s.columns, function( col, i ) {\n\t\t\tif ( col.never ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttitle:   dt.settings()[0].aoColumns[ i ].sTitle,\n\t\t\t\tdata:    dt.cell( rowIdx, i ).render( that.c.orthogonal ),\n\t\t\t\thidden:  dt.column( i ).visible() && !that.s.current[ i ]\n\t\t\t};\n\t\t} );\n\t},\n\n\n\t/**\n\t * Find a breakpoint object from a name\n\t *\n\t * @param  {string} name Breakpoint name to find\n\t * @return {object}      Breakpoint description object\n\t * @private\n\t */\n\t_find: function ( name )\n\t{\n\t\tvar breakpoints = this.c.breakpoints;\n\n\t\tfor ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n\t\t\tif ( breakpoints[i].name === name ) {\n\t\t\t\treturn breakpoints[i];\n\t\t\t}\n\t\t}\n\t},\n\n\n\t/**\n\t * Re-create the contents of the child rows as the display has changed in\n\t * some way.\n\t *\n\t * @private\n\t */\n\t_redrawChildren: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\n\t\tdt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {\n\t\t\tvar row = dt.row( idx );\n\n\t\t\tthat._detailsDisplay( dt.row( idx ), true );\n\t\t} );\n\t},\n\n\n\t/**\n\t * Alter the table display for a resized viewport. This involves first\n\t * determining what breakpoint the window currently is in, getting the\n\t * column visibilities to apply and then setting them.\n\t *\n\t * @private\n\t */\n\t_resize: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar width = $(window).width();\n\t\tvar breakpoints = this.c.breakpoints;\n\t\tvar breakpoint = breakpoints[0].name;\n\t\tvar columns = this.s.columns;\n\t\tvar i, ien;\n\t\tvar oldVis = this.s.current.slice();\n\n\t\t// Determine what breakpoint we are currently at\n\t\tfor ( i=breakpoints.length-1 ; i>=0 ; i-- ) {\n\t\t\tif ( width <= breakpoints[i].width ) {\n\t\t\t\tbreakpoint = breakpoints[i].name;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Show the columns for that break point\n\t\tvar columnsVis = this._columnsVisiblity( breakpoint );\n\t\tthis.s.current = columnsVis;\n\n\t\t// Set the class before the column visibility is changed so event\n\t\t// listeners know what the state is. Need to determine if there are\n\t\t// any columns that are not visible but can be shown\n\t\tvar collapsedClass = false;\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tif ( columnsVis[i] === false && ! columns[i].never ) {\n\t\t\t\tcollapsedClass = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$( dt.table().node() ).toggleClass( 'collapsed', collapsedClass );\n\n\t\tvar changed = false;\n\n\t\tdt.columns().eq(0).each( function ( colIdx, i ) {\n\t\t\tif ( columnsVis[i] !== oldVis[i] ) {\n\t\t\t\tchanged = true;\n\t\t\t\tthat._setColumnVis( colIdx, columnsVis[i] );\n\t\t\t}\n\t\t} );\n\n\t\tif ( changed ) {\n\t\t\tthis._redrawChildren();\n\t\t}\n\t},\n\n\n\t/**\n\t * Determine the width of each column in the table so the auto column hiding\n\t * has that information to work with. This method is never going to be 100%\n\t * perfect since column widths can change slightly per page, but without\n\t * seriously compromising performance this is quite effective.\n\t *\n\t * @private\n\t */\n\t_resizeAuto: function ()\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar columns = this.s.columns;\n\n\t\t// Are we allowed to do auto sizing?\n\t\tif ( ! this.c.auto ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Are there any columns that actually need auto-sizing, or do they all\n\t\t// have classes defined\n\t\tif ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clone the table with the current data in it\n\t\tvar tableWidth   = dt.table().node().offsetWidth;\n\t\tvar columnWidths = dt.columns;\n\t\tvar clonedTable  = dt.table().node().cloneNode( false );\n\t\tvar clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );\n\t\tvar clonedBody   = $( dt.table().body().cloneNode( false ) ).appendTo( clonedTable );\n\n\t\t// Header\n\t\tvar headerCells = dt.columns()\n\t\t\t.header()\n\t\t\t.filter( function (idx) {\n\t\t\t\treturn dt.column(idx).visible();\n\t\t\t} )\n\t\t\t.to$()\n\t\t\t.clone( false )\n\t\t\t.css( 'display', 'table-cell' );\n\n\t\t// Body rows - we don't need to take account of DataTables' column\n\t\t// visibility since we implement our own here (hence the `display` set)\n\t\t$(clonedBody)\n\t\t\t.append( $(dt.rows( { page: 'current' } ).nodes()).clone( false ) )\n\t\t\t.find( 'th, td' ).css( 'display', '' );\n\n\t\t// Footer\n\t\tvar footer = dt.table().footer();\n\t\tif ( footer ) {\n\t\t\tvar clonedFooter = $( footer.cloneNode( false ) ).appendTo( clonedTable );\n\t\t\tvar footerCells = dt.columns()\n\t\t\t\t.header()\n\t\t\t\t.filter( function (idx) {\n\t\t\t\t\treturn dt.column(idx).visible();\n\t\t\t\t} )\n\t\t\t\t.to$()\n\t\t\t\t.clone( false )\n\t\t\t\t.css( 'display', 'table-cell' );\n\n\t\t\t$('<tr/>')\n\t\t\t\t.append( footerCells )\n\t\t\t\t.appendTo( clonedFooter );\n\t\t}\n\n\t\t$('<tr/>')\n\t\t\t.append( headerCells )\n\t\t\t.appendTo( clonedHeader );\n\n\t\t// In the inline case extra padding is applied to the first column to\n\t\t// give space for the show / hide icon. We need to use this in the\n\t\t// calculation\n\t\tif ( this.c.details.type === 'inline' ) {\n\t\t\t$(clonedTable).addClass( 'dtr-inline collapsed' );\n\t\t}\n\n\t\tvar inserted = $('<div/>')\n\t\t\t.css( {\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1,\n\t\t\t\toverflow: 'hidden'\n\t\t\t} )\n\t\t\t.append( clonedTable );\n\n\t\tinserted.insertBefore( dt.table().node() );\n\n\t\t// The cloned header now contains the smallest that each column can be\n\t\theaderCells.each( function (i) {\n\t\t\tvar idx = dt.column.index( 'fromVisible', i );\n\t\t\tcolumns[ idx ].minWidth =  this.offsetWidth || 0;\n\t\t} );\n\n\t\tinserted.remove();\n\t},\n\n\t/**\n\t * Set a column's visibility.\n\t *\n\t * We don't use DataTables' column visibility controls in order to ensure\n\t * that column visibility can Responsive can no-exist. Since only IE8+ is\n\t * supported (and all evergreen browsers of course) the control of the\n\t * display attribute works well.\n\t *\n\t * @param {integer} col      Column index\n\t * @param {boolean} showHide Show or hide (true or false)\n\t * @private\n\t */\n\t_setColumnVis: function ( col, showHide )\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar display = showHide ? '' : 'none'; // empty string will remove the attr\n\n\t\t$( dt.column( col ).header() ).css( 'display', display );\n\t\t$( dt.column( col ).footer() ).css( 'display', display );\n\t\tdt.column( col ).nodes().to$().css( 'display', display );\n\t},\n\n\n\t/**\n\t * Update the cell tab indexes for keyboard accessibility. This is called on\n\t * every table draw - that is potentially inefficient, but also the least\n\t * complex option given that column visibility can change on the fly. Its a\n\t * shame user-focus was removed from CSS 3 UI, as it would have solved this\n\t * issue with a single CSS statement.\n\t *\n\t * @private\n\t */\n\t_tabIndexes: function ()\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar cells = dt.cells( { page: 'current' } ).nodes().to$();\n\t\tvar ctx = dt.settings()[0];\n\t\tvar target = this.c.details.target;\n\n\t\tcells.filter( '[data-dtr-keyboard]' ).removeData( '[data-dtr-keyboard]' );\n\n\t\tvar selector = typeof target === 'number' ?\n\t\t\t':eq('+target+')' :\n\t\t\ttarget;\n\n\t\t$( selector, dt.rows( { page: 'current' } ).nodes() )\n\t\t\t.attr( 'tabIndex', ctx.iTabIndex )\n\t\t\t.data( 'dtr-keyboard', 1 );\n\t}\n} );\n\n\n/**\n * List of default breakpoints. Each item in the array is an object with two\n * properties:\n *\n * * `name` - the breakpoint name.\n * * `width` - the breakpoint width\n *\n * @name Responsive.breakpoints\n * @static\n */\nResponsive.breakpoints = [\n\t{ name: 'desktop',  width: Infinity },\n\t{ name: 'tablet-l', width: 1024 },\n\t{ name: 'tablet-p', width: 768 },\n\t{ name: 'mobile-l', width: 480 },\n\t{ name: 'mobile-p', width: 320 }\n];\n\n\n/**\n * Display methods - functions which define how the hidden data should be shown\n * in the table.\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.display = {\n\tchildRow: function ( row, update, render ) {\n\t\tif ( update ) {\n\t\t\tif ( $(row.node()).hasClass('parent') ) {\n\t\t\t\trow.child( render(), 'child' ).show();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ( ! row.child.isShown()  ) {\n\t\t\t\trow.child( render(), 'child' ).show();\n\t\t\t\t$( row.node() ).addClass( 'parent' );\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trow.child( false );\n\t\t\t\t$( row.node() ).removeClass( 'parent' );\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t},\n\n\tchildRowImmediate: function ( row, update, render ) {\n\t\tif ( (! update && row.child.isShown()) || ! row.responsive.hasHidden() ) {\n\t\t\t// User interaction and the row is show, or nothing to show\n\t\t\trow.child( false );\n\t\t\t$( row.node() ).removeClass( 'parent' );\n\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\t// Display\n\t\t\trow.child( render(), 'child' ).show();\n\t\t\t$( row.node() ).addClass( 'parent' );\n\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t// This is a wrapper so the modal options for Bootstrap and jQuery UI can\n\t// have options passed into them. This specific one doesn't need to be a\n\t// function but it is for consistency in the `modal` name\n\tmodal: function ( options ) {\n\t\treturn function ( row, update, render ) {\n\t\t\tif ( ! update ) {\n\t\t\t\t// Show a modal\n\t\t\t\tvar close = function () {\n\t\t\t\t\tmodal.remove(); // will tidy events for us\n\t\t\t\t\t$(document).off( 'keypress.dtr' );\n\t\t\t\t};\n\n\t\t\t\tvar modal = $('<div class=\"dtr-modal\"/>')\n\t\t\t\t\t.append( $('<div class=\"dtr-modal-display\"/>')\n\t\t\t\t\t\t.append( $('<div class=\"dtr-modal-content\"/>')\n\t\t\t\t\t\t\t.append( render() )\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.append( $('<div class=\"dtr-modal-close\">&times;</div>' )\n\t\t\t\t\t\t\t.click( function () {\n\t\t\t\t\t\t\t\tclose();\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.append( $('<div class=\"dtr-modal-background\"/>')\n\t\t\t\t\t\t.click( function () {\n\t\t\t\t\t\t\tclose();\n\t\t\t\t\t\t} )\n\t\t\t\t\t)\n\t\t\t\t\t.appendTo( 'body' );\n\n\t\t\t\tif ( options && options.header ) {\n\t\t\t\t\tmodal.find( 'div.dtr-modal-content' ).prepend(\n\t\t\t\t\t\t'<h2>'+options.header( row )+'</h2>'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$(document).on( 'keyup.dtr', function (e) {\n\t\t\t\t\tif ( e.keyCode === 27 ) {\n\t\t\t\t\t\te.stopPropagation();\n\n\t\t\t\t\t\tclose();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$('div.dtr-modal-content')\n\t\t\t\t\t.empty()\n\t\t\t\t\t.append( render() );\n\t\t\t}\n\t\t};\n\t}\n};\n\n\n/**\n * Responsive default settings for initialisation\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.defaults = {\n\t/**\n\t * List of breakpoints for the instance. Note that this means that each\n\t * instance can have its own breakpoints. Additionally, the breakpoints\n\t * cannot be changed once an instance has been creased.\n\t *\n\t * @type {Array}\n\t * @default Takes the value of `Responsive.breakpoints`\n\t */\n\tbreakpoints: Responsive.breakpoints,\n\n\t/**\n\t * Enable / disable auto hiding calculations. It can help to increase\n\t * performance slightly if you disable this option, but all columns would\n\t * need to have breakpoint classes assigned to them\n\t *\n\t * @type {Boolean}\n\t * @default  `true`\n\t */\n\tauto: true,\n\n\t/**\n\t * Details control. If given as a string value, the `type` property of the\n\t * default object is set to that value, and the defaults used for the rest\n\t * of the object - this is for ease of implementation.\n\t *\n\t * The object consists of the following properties:\n\t *\n\t * * `display` - A function that is used to show and hide the hidden details\n\t * * `renderer` - function that is called for display of the child row data.\n\t *   The default function will show the data from the hidden columns\n\t * * `target` - Used as the selector for what objects to attach the child\n\t *   open / close to\n\t * * `type` - `false` to disable the details display, `inline` or `column`\n\t *   for the two control types\n\t *\n\t * @type {Object|string}\n\t */\n\tdetails: {\n\t\tdisplay: Responsive.display.childRow,\n\n\t\trenderer: function ( api, rowIdx, columns ) {\n\t\t\tvar data = $.map( columns, function ( col, i ) {\n\t\t\t\treturn col.hidden ?\n\t\t\t\t\t'<li data-dtr-index=\"'+i+'\">'+\n\t\t\t\t\t\t'<span class=\"dtr-title\">'+\n\t\t\t\t\t\t\tcol.title+\n\t\t\t\t\t\t'</span> '+\n\t\t\t\t\t\t'<span class=\"dtr-data\">'+\n\t\t\t\t\t\t\tcol.data+\n\t\t\t\t\t\t'</span>'+\n\t\t\t\t\t'</li>' :\n\t\t\t\t\t'';\n\t\t\t} ).join('');\n\n\t\t\treturn data ?\n\t\t\t\t$('<ul data-dtr-index=\"'+rowIdx+'\"/>').append( data ) :\n\t\t\t\tfalse;\n\t\t},\n\n\t\ttarget: 0,\n\n\t\ttype: 'inline'\n\t},\n\n\t/**\n\t * Orthogonal data request option. This is used to define the data type\n\t * requested when Responsive gets the data to show in the child row.\n\t *\n\t * @type {String}\n\t */\n\torthogonal: 'display'\n};\n\n\n/*\n * API\n */\nvar Api = $.fn.dataTable.Api;\n\n// Doesn't do anything - work around for a bug in DT... Not documented\nApi.register( 'responsive()', function () {\n\treturn this;\n} );\n\nApi.register( 'responsive.index()', function ( li ) {\n\tli = $(li);\n\n\treturn {\n\t\tcolumn: li.data('dtr-index'),\n\t\trow:    li.parent().data('dtr-index')\n\t};\n} );\n\nApi.register( 'responsive.rebuild()', function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx._responsive ) {\n\t\t\tctx._responsive._classLogic();\n\t\t}\n\t} );\n} );\n\nApi.register( 'responsive.recalc()', function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx._responsive ) {\n\t\t\tctx._responsive._resizeAuto();\n\t\t\tctx._responsive._resize();\n\t\t}\n\t} );\n} );\n\nApi.register( 'responsive.hasHidden()', function () {\n\tvar ctx = this.context[0];\n\n\treturn ctx._responsive ?\n\t\t$.inArray( false, ctx._responsive.s.current ) !== -1 :\n\t\tfalse;\n} );\n\n\n/**\n * Version information\n *\n * @name Responsive.version\n * @static\n */\nResponsive.version = '2.0.0';\n\n\n$.fn.dataTable.Responsive = Responsive;\n$.fn.DataTable.Responsive = Responsive;\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on( 'init.dt.dtr', function (e, settings, json) {\n\tif ( e.namespace !== 'dt' ) {\n\t\treturn;\n\t}\n\n\tif ( $(settings.nTable).hasClass( 'responsive' ) ||\n\t\t $(settings.nTable).hasClass( 'dt-responsive' ) ||\n\t\t settings.oInit.responsive ||\n\t\t DataTable.defaults.responsive\n\t) {\n\t\tvar init = settings.oInit.responsive;\n\n\t\tif ( init !== false ) {\n\t\t\tnew Responsive( settings, $.isPlainObject( init ) ? init : {}  );\n\t\t}\n\t}\n} );\n\n\nreturn Responsive;\n}));\n"]},"metadata":{},"sourceType":"module"}