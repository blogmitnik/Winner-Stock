{"ast":null,"code":"/*!\n * Column visibility buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  $.extend(DataTable.ext.buttons, {\n    // A collection of column visibility buttons\n    colvis: function colvis(dt, conf) {\n      return {\n        extend: 'collection',\n        text: function text(dt) {\n          return dt.i18n('buttons.colvis', 'Column visibility');\n        },\n        className: 'buttons-colvis',\n        buttons: [{\n          extend: 'columnsToggle',\n          columns: conf.columns\n        }]\n      };\n    },\n    // Selected columns with individual buttons - toggle column visibility\n    columnsToggle: function columnsToggle(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnToggle',\n          columns: idx\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to toggle column visibility\n    columnToggle: function columnToggle(dt, conf) {\n      return {\n        extend: 'columnVisibility',\n        columns: conf.columns\n      };\n    },\n    // Selected columns with individual buttons - set column visibility\n    columnsVisibility: function columnsVisibility(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnVisibility',\n          columns: idx,\n          visibility: conf.visibility\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to set column visibility\n    columnVisibility: {\n      columns: undefined,\n      // column selector\n      text: function text(dt, button, conf) {\n        return conf._columnText(dt, conf.columns);\n      },\n      className: 'buttons-columnVisibility',\n      action: function action(e, dt, button, conf) {\n        var col = dt.columns(conf.columns);\n        var curr = col.visible();\n        col.visible(conf.visibility !== undefined ? conf.visibility : !(curr.length ? curr[0] : false));\n      },\n      init: function init(dt, button, conf) {\n        var that = this;\n        dt.on('column-visibility.dt' + conf.namespace, function (e, settings) {\n          if (!settings.bDestroying) {\n            that.active(dt.column(conf.columns).visible());\n          }\n        }).on('column-reorder.dt' + conf.namespace, function (e, settings, details) {\n          // Don't rename buttons based on column name if the button\n          // controls more than one column!\n          if (dt.columns(conf.columns).count() !== 1) {\n            return;\n          }\n\n          if (typeof conf.columns === 'number') {\n            conf.columns = details.mapping[conf.columns];\n          }\n\n          var col = dt.column(conf.columns);\n          that.text(conf._columnText(dt, conf.columns));\n          that.active(col.visible());\n        });\n        this.active(dt.column(conf.columns).visible());\n      },\n      destroy: function destroy(dt, button, conf) {\n        dt.off('column-visibility.dt' + conf.namespace).off('column-reorder.dt' + conf.namespace);\n      },\n      _columnText: function _columnText(dt, col) {\n        // Use DataTables' internal data structure until this is presented\n        // is a public API. The other option is to use\n        // `$( column(col).node() ).text()` but the node might not have been\n        // populated when Buttons is constructed.\n        var idx = dt.column(col).index();\n        return dt.settings()[0].aoColumns[idx].sTitle.replace(/\\n/g, \" \") // remove new lines\n        .replace(/<.*?>/g, \"\") // strip HTML\n        .replace(/^\\s+|\\s+$/g, \"\"); // trim\n      }\n    },\n    colvisRestore: {\n      className: 'buttons-colvisRestore',\n      text: function text(dt) {\n        return dt.i18n('buttons.colvisRestore', 'Restore visibility');\n      },\n      init: function init(dt, button, conf) {\n        conf._visOriginal = dt.columns().indexes().map(function (idx) {\n          return dt.column(idx).visible();\n        }).toArray();\n      },\n      action: function action(e, dt, button, conf) {\n        dt.columns().every(function (i) {\n          // Take into account that ColReorder might have disrupted our\n          // indexes\n          var idx = dt.colReorder && dt.colReorder.transpose ? dt.colReorder.transpose(i, 'toOriginal') : i;\n          this.visible(conf._visOriginal[idx]);\n        });\n      }\n    },\n    colvisGroup: {\n      className: 'buttons-colvisGroup',\n      action: function action(e, dt, button, conf) {\n        dt.columns(conf.show).visible(true, false);\n        dt.columns(conf.hide).visible(false, false);\n        dt.columns.adjust();\n      },\n      show: [],\n      hide: []\n    }\n  });\n  return DataTable.Buttons;\n});","map":{"version":3,"sources":["/Users/david/Winner-Stock/app/javascript/dataTables/buttons/buttons.colVis.js"],"names":["factory","define","amd","$","window","document","exports","module","root","fn","dataTable","require","Buttons","jQuery","undefined","DataTable","extend","ext","buttons","colvis","dt","conf","text","i18n","className","columns","columnsToggle","indexes","map","idx","toArray","columnToggle","columnsVisibility","visibility","columnVisibility","button","_columnText","action","e","col","curr","visible","length","init","that","on","namespace","settings","bDestroying","active","column","details","count","mapping","destroy","off","index","aoColumns","sTitle","replace","colvisRestore","_visOriginal","every","i","colReorder","transpose","colvisGroup","show","hide","adjust"],"mappings":"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","sourcesContent":["/*!\n * Column visibility buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n\n(function( factory ){\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery', 'datatables.net', 'datatables.net-buttons'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ || ! $.fn.dataTable ) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\tif ( ! $.fn.dataTable.Buttons ) {\n\t\t\t\trequire('datatables.net-buttons')(root, $);\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n$.extend( DataTable.ext.buttons, {\n\t// A collection of column visibility buttons\n\tcolvis: function ( dt, conf ) {\n\t\treturn {\n\t\t\textend: 'collection',\n\t\t\ttext: function ( dt ) {\n\t\t\t\treturn dt.i18n( 'buttons.colvis', 'Column visibility' );\n\t\t\t},\n\t\t\tclassName: 'buttons-colvis',\n\t\t\tbuttons: [ {\n\t\t\t\textend: 'columnsToggle',\n\t\t\t\tcolumns: conf.columns\n\t\t\t} ]\n\t\t};\n\t},\n\n\t// Selected columns with individual buttons - toggle column visibility\n\tcolumnsToggle: function ( dt, conf ) {\n\t\tvar columns = dt.columns( conf.columns ).indexes().map( function ( idx ) {\n\t\t\treturn {\n\t\t\t\textend: 'columnToggle',\n\t\t\t\tcolumns: idx\n\t\t\t};\n\t\t} ).toArray();\n\n\t\treturn columns;\n\t},\n\n\t// Single button to toggle column visibility\n\tcolumnToggle: function ( dt, conf ) {\n\t\treturn {\n\t\t\textend: 'columnVisibility',\n\t\t\tcolumns: conf.columns\n\t\t};\n\t},\n\n\t// Selected columns with individual buttons - set column visibility\n\tcolumnsVisibility: function ( dt, conf ) {\n\t\tvar columns = dt.columns( conf.columns ).indexes().map( function ( idx ) {\n\t\t\treturn {\n\t\t\t\textend: 'columnVisibility',\n\t\t\t\tcolumns: idx,\n\t\t\t\tvisibility: conf.visibility\n\t\t\t};\n\t\t} ).toArray();\n\n\t\treturn columns;\n\t},\n\n\t// Single button to set column visibility\n\tcolumnVisibility: {\n\t\tcolumns: undefined, // column selector\n\t\ttext: function ( dt, button, conf ) {\n\t\t\treturn conf._columnText( dt, conf.columns );\n\t\t},\n\t\tclassName: 'buttons-columnVisibility',\n\t\taction: function ( e, dt, button, conf ) {\n\t\t\tvar col = dt.columns( conf.columns );\n\t\t\tvar curr = col.visible();\n\n\t\t\tcol.visible( conf.visibility !== undefined ?\n\t\t\t\tconf.visibility :\n\t\t\t\t! (curr.length ? curr[0] : false )\n\t\t\t);\n\t\t},\n\t\tinit: function ( dt, button, conf ) {\n\t\t\tvar that = this;\n\n\t\t\tdt\n\t\t\t\t.on( 'column-visibility.dt'+conf.namespace, function (e, settings) {\n\t\t\t\t\tif ( ! settings.bDestroying ) {\n\t\t\t\t\t\tthat.active( dt.column( conf.columns ).visible() );\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.on( 'column-reorder.dt'+conf.namespace, function (e, settings, details) {\n\t\t\t\t\t// Don't rename buttons based on column name if the button\n\t\t\t\t\t// controls more than one column!\n\t\t\t\t\tif ( dt.columns( conf.columns ).count() !== 1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof conf.columns === 'number' ) {\n\t\t\t\t\t\tconf.columns = details.mapping[ conf.columns ];\n\t\t\t\t\t}\n\n\t\t\t\t\tvar col = dt.column( conf.columns );\n\n\t\t\t\t\tthat.text( conf._columnText( dt, conf.columns ) );\n\t\t\t\t\tthat.active( col.visible() );\n\t\t\t\t} );\n\n\t\t\tthis.active( dt.column( conf.columns ).visible() );\n\t\t},\n\t\tdestroy: function ( dt, button, conf ) {\n\t\t\tdt\n\t\t\t\t.off( 'column-visibility.dt'+conf.namespace )\n\t\t\t\t.off( 'column-reorder.dt'+conf.namespace );\n\t\t},\n\n\t\t_columnText: function ( dt, col ) {\n\t\t\t// Use DataTables' internal data structure until this is presented\n\t\t\t// is a public API. The other option is to use\n\t\t\t// `$( column(col).node() ).text()` but the node might not have been\n\t\t\t// populated when Buttons is constructed.\n\t\t\tvar idx = dt.column( col ).index();\n\t\t\treturn dt.settings()[0].aoColumns[ idx ].sTitle\n\t\t\t\t.replace(/\\n/g,\" \")        // remove new lines\n\t\t\t\t.replace( /<.*?>/g, \"\" )   // strip HTML\n\t\t\t\t.replace(/^\\s+|\\s+$/g,\"\"); // trim\n\t\t}\n\t},\n\n\n\tcolvisRestore: {\n\t\tclassName: 'buttons-colvisRestore',\n\n\t\ttext: function ( dt ) {\n\t\t\treturn dt.i18n( 'buttons.colvisRestore', 'Restore visibility' );\n\t\t},\n\n\t\tinit: function ( dt, button, conf ) {\n\t\t\tconf._visOriginal = dt.columns().indexes().map( function ( idx ) {\n\t\t\t\treturn dt.column( idx ).visible();\n\t\t\t} ).toArray();\n\t\t},\n\n\t\taction: function ( e, dt, button, conf ) {\n\t\t\tdt.columns().every( function ( i ) {\n\t\t\t\t// Take into account that ColReorder might have disrupted our\n\t\t\t\t// indexes\n\t\t\t\tvar idx = dt.colReorder && dt.colReorder.transpose ?\n\t\t\t\t\tdt.colReorder.transpose( i, 'toOriginal' ) :\n\t\t\t\t\ti;\n\n\t\t\t\tthis.visible( conf._visOriginal[ idx ] );\n\t\t\t} );\n\t\t}\n\t},\n\n\n\tcolvisGroup: {\n\t\tclassName: 'buttons-colvisGroup',\n\n\t\taction: function ( e, dt, button, conf ) {\n\t\t\tdt.columns( conf.show ).visible( true, false );\n\t\t\tdt.columns( conf.hide ).visible( false, false );\n\n\t\t\tdt.columns.adjust();\n\t\t},\n\n\t\tshow: [],\n\n\t\thide: []\n\t}\n} );\n\n\nreturn DataTable.Buttons;\n}));\n"]},"metadata":{},"sourceType":"module"}