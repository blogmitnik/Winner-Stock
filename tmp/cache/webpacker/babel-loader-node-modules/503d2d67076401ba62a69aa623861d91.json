{"ast":null,"code":"$(document).ready(function () {\n  var switched = false;\n\n  var updateTables = function updateTables() {\n    if ($(window).width() < 767 && !switched) {\n      switched = true;\n      $(\"table.responsive\").each(function (i, element) {\n        splitTable($(element));\n      });\n      return true;\n    } else if (switched && $(window).width() > 767) {\n      switched = false;\n      $(\"table.responsive\").each(function (i, element) {\n        unsplitTable($(element));\n      });\n    }\n  };\n\n  $(window).load(updateTables);\n  $(window).on(\"redraw\", function () {\n    switched = false;\n    updateTables();\n  }); // An event to listen for\n\n  $(window).on(\"resize\", updateTables);\n\n  function splitTable(original) {\n    original.wrap(\"<div class='table-wrapper' />\");\n    var copy = original.clone();\n    copy.find(\"td:not(:first-child), th:not(:first-child)\").css(\"display\", \"none\");\n    copy.removeClass(\"responsive\");\n    original.closest(\".table-wrapper\").append(copy);\n    copy.wrap(\"<div class='pinned' />\");\n    original.wrap(\"<div class='scrollable' />\");\n    setCellHeights(original, copy);\n  }\n\n  function unsplitTable(original) {\n    original.closest(\".table-wrapper\").find(\".pinned\").remove();\n    original.unwrap();\n    original.unwrap();\n  }\n\n  function setCellHeights(original, copy) {\n    var tr = original.find('tr'),\n        tr_copy = copy.find('tr'),\n        heights = [];\n    tr.each(function (index) {\n      var self = $(this),\n          tx = self.find('th, td');\n      tx.each(function () {\n        var height = $(this).outerHeight(true);\n        heights[index] = heights[index] || 0;\n        if (height > heights[index]) heights[index] = height;\n      });\n    });\n    tr_copy.each(function (index) {\n      $(this).height(heights[index]);\n    });\n  }\n});","map":{"version":3,"sources":["/Users/david/Winner-Stock/app/javascript/packs/responsive-tables.js"],"names":["$","document","ready","switched","updateTables","window","width","each","i","element","splitTable","unsplitTable","load","on","original","wrap","copy","clone","find","css","removeClass","closest","append","setCellHeights","remove","unwrap","tr","tr_copy","heights","index","self","tx","height","outerHeight"],"mappings":"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","sourcesContent":["$(document).ready(function() {\n  var switched = false;\n  var updateTables = function() {\n    if (($(window).width() < 767) && !switched ){\n      switched = true;\n      $(\"table.responsive\").each(function(i, element) {\n        splitTable($(element));\n      });\n      return true;\n    }\n    else if (switched && ($(window).width() > 767)) {\n      switched = false;\n      $(\"table.responsive\").each(function(i, element) {\n        unsplitTable($(element));\n      });\n    }\n  };\n   \n  $(window).load(updateTables);\n  $(window).on(\"redraw\",function(){switched=false;updateTables();}); // An event to listen for\n  $(window).on(\"resize\", updateTables);\n   \n\t\n\tfunction splitTable(original)\n\t{\n\t\toriginal.wrap(\"<div class='table-wrapper' />\");\n\t\t\n\t\tvar copy = original.clone();\n\t\tcopy.find(\"td:not(:first-child), th:not(:first-child)\").css(\"display\", \"none\");\n\t\tcopy.removeClass(\"responsive\");\n\t\t\n\t\toriginal.closest(\".table-wrapper\").append(copy);\n\t\tcopy.wrap(\"<div class='pinned' />\");\n\t\toriginal.wrap(\"<div class='scrollable' />\");\n\n    setCellHeights(original, copy);\n\t}\n\t\n\tfunction unsplitTable(original) {\n    original.closest(\".table-wrapper\").find(\".pinned\").remove();\n    original.unwrap();\n    original.unwrap();\n\t}\n\n  function setCellHeights(original, copy) {\n    var tr = original.find('tr'),\n        tr_copy = copy.find('tr'),\n        heights = [];\n\n    tr.each(function (index) {\n      var self = $(this),\n          tx = self.find('th, td');\n\n      tx.each(function () {\n        var height = $(this).outerHeight(true);\n        heights[index] = heights[index] || 0;\n        if (height > heights[index]) heights[index] = height;\n      });\n\n    });\n\n    tr_copy.each(function (index) {\n      $(this).height(heights[index]);\n    });\n  }\n\n});\n"]},"metadata":{},"sourceType":"module"}